parameters <- list(k_f1 = 2, k_r1 = 1, Km_2 = 0.1, kcat_2 = 3, k_f3 = 2, k_f4 = 2, k_s5 = 0.5, k_d6 = 0.1)
# Unpack Parameters
parameters[["k_f1"]]   <- unlist(nls.out$par[1])
parameters
unlist(nls.out$par[1])
unname(unlist(nls.out$par[1])
)
# Unpack Parameters
parameters[["k_f1"]]   <- unname(unlist(nls.out$par[1]))
parameters
parameters <- list(k_f1 = 2, k_r1 = 1, Km_2 = 0.1, kcat_2 = 3, k_f3 = 2, k_f4 = 2, k_s5 = 0.5, k_d6 = 0.1)
# Unpack Parameters
parameters[["k_f1"]]   <- unname(unlist(nls.out$par[1]))
parameters[["k_r1"]]   <- unname(unlist(nls.out$par[2]))
parameters[["kcat_2"]] <- unname(unlist(nls.out$par[3]))
parameters
out <- ode(y = state, times = times, func = myModel, parms = parameters)
t <- out[,1]
a <- out[,3]
b <- out[,4]
p <- out[,8]
df <- data.frame(t,a,b,p)
df.m <- reshape2::melt(df, id.vars="t")
ggplot(df.m, aes(x=t, y=value, col=variable)) +
geom_line()
ggplot(df.m, aes(x=t, y=value, col=variable)) +
geom_line() +
geom_point(df.m, aes(x=t, y=value, col=variable))
View(data)
data.m <- reshape2::melt(data, id.vars="Time")
View(data.m)
ggplot(df.m, aes(x=t, y=value, col=variable)) +
geom_line() +
geom_point(data, aes(x=t, y=value, col=variable))
ggplot(df.m, aes(x=t, y=value, group=variable)) +
geom_line() +
geom_point(data, aes(x=t, y=value, col=variable))
colnames(data)[1] <- "t"
data.m <- reshape2::melt(data, id.vars="t")
View(data.m)
ggplot(df.m, aes(x=t, y=value, group=variable)) +
geom_line() +
geom_point(data.m, aes(x=t, y=value, col=variable))
ggplot(df.m, aes(x=t, y=value, col=variable)) +
geom_line() +
geom_point(data.m, aes(x=t, y=value, col=variable))
ggplot() +
geom_line(df.m, aes(x=t, y=value, col=variable)) +
geom_point(data.m, aes(x=t, y=value, col=variable))
ggplot() +
#geom_line(df.m, aes(x=t, y=value, col=variable)) +
geom_point(data.m, aes(x=t, y=value, col=variable))
ggplot() +
#geom_line(df.m, aes(x=t, y=value, col=variable)) +
geom_point(data.m, aes(x=t, y=value, colour=variable))
ggplot(df.m) +
#geom_line(df.m, aes(x=t, y=value, col=variable)) +
geom_point(data.m, aes(x=t, y=value, colour=variable))
ggplot(df.m) +
#geom_line(df.m, aes(x=t, y=value, col=variable)) +
geom_point(data.m, aes(x=t, y=value))
data.m
ggplot(NULL, aes(x=t, y=value, col=variable)) +
#geom_line(df.m, aes(x=t, y=value, col=variable)) +
geom_point(data.m, aes(x=t, y=value))
ggplot(NULL, aes(x=t, y=value, col=variable)) +
#geom_line(df.m, aes(x=t, y=value, col=variable)) +
geom_point(data.m)
View(data.m)
ggplot(NULL, aes(x=t, y=value, col=variable)) +
geom_point(data.m)
ggplot(NULL, aes(x=t, y=value, col=variable)) +
geom_line(df.m) +
geom_point(data.m)
ggplot(NULL, aes(x=t, y=value, col=variable)) +
geom_line(df.m)
ggplot() +
geom_point(data = df.m, aes(t, value))
ggplot() +
geom_point(data = df.m, aes(t, value)) +
geom_point(data = data.m, aes(t, value))
ggplot() +
geom_line(data = df.m, aes(t, value)) +
geom_point(data = data.m, aes(t, value))
ggplot() +
geom_line(data = df.m, aes(t, value, variable)) +
geom_point(data = data.m, aes(t, value))
ggplot(aes(col=variable)) +
geom_line(data = df.m, aes(t, value)) +
geom_point(data = data.m, aes(t, value))
ggplot(NULL, aes(col=variable)) +
geom_line(data = df.m, aes(t, value)) +
geom_point(data = data.m, aes(t, value))
View(data.m)
View(df.m)
t <- out[,1]
A <- out[,3]
B <- out[,4]
P <- out[,8]
df <- data.frame(t,a,b,p)
df.m <- reshape2::melt(df, id.vars="t")
colnames(data)[1] <- "t"
data.m <- reshape2::melt(data, id.vars="t")
ggplot(NULL, aes(col=variable)) +
geom_line(data = df.m, aes(t, value)) +
geom_point(data = data.m, aes(t, value))
View(df.m)
df <- data.frame(t,A,B,P)
df.m <- reshape2::melt(df, id.vars="t")
colnames(data)[1] <- "t"
data.m <- reshape2::melt(data, id.vars="t")
ggplot(NULL, aes(col=variable)) +
geom_line(data = df.m, aes(t, value)) +
geom_point(data = data.m, aes(t, value))
lower <- c(0,0,0)
upper <- c(10, 4, 10)
lower <- c(0,0,0)
# Perform Parameter Estimation of k_f1/k_r1
data <- read_excel("C:/Users/ju61191/Desktop/tutorial_example_data.xlsx")
p.0 <- list(k_f1=5, k_r1=0.1, kcat_2=2)
upper <- c(10, 4, 10)
lower <- c(0,0,0)
nls.out <- nls.lm(par = p.0,
lower = lower,
upper = upper,
fn = ssd_objective,
par.in.model = parameters,
ics.in.model = state,
var.in.model = names(state),
time = times,
observed.data = data,
control = nls.lm.control(nprint=1)
)
# Unpack Parameters
parameters[["k_f1"]]   <- unname(unlist(nls.out$par[1]))
parameters[["k_r1"]]   <- unname(unlist(nls.out$par[2]))
parameters[["kcat_2"]] <- unname(unlist(nls.out$par[3]))
parameters
out <- ode(y = state, times = times, func = myModel, parms = parameters)
t <- out[,1]
A <- out[,3]
B <- out[,4]
P <- out[,8]
df <- data.frame(t,A,B,P)
df.m <- reshape2::melt(df, id.vars="t")
colnames(data)[1] <- "t"
data.m <- reshape2::melt(data, id.vars="t")
ggplot(NULL, aes(col=variable)) +
geom_line(data = df.m, aes(t, value)) +
geom_point(data = data.m, aes(t, value))
shiny::runApp()
runApp()
runApp()
runApp()
View(species.list)
View(species.list)
runApp()
View(eqn)
runApp()
View(eqn)
runApp()
runApp()
# Sample vector
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
# Replace 'Prot' with 'Replacement' for demonstration purposes
# (change 'Replacement' to whatever you want)
a <- sub("\\bProt\\b", "Replacement", a)
print(a)
# Sample vector
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
# Replace 'Prot' with 'Replacement' for demonstration purposes
# (change 'Replacement' to whatever you want)
a <- sub("(^|\\s)Prot($|\\s)", "\\1Replacement\\2", a)
print(a)
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
a <- ifelse(a == "Prot", "Replacement", a)
print(a)
# Replacement function
replace_prot <- function(item) {
if (is.character(item) && length(item) == 1) {  # if it's a single string
return(sub("\\bProt\\b(?!\\.)", "Replacement", item))
} else if (is.vector(item)) {  # if it's a vector
return(sapply(item, function(x) sub("\\bProt\\b(?!\\.)", "Replacement", x)))
}
return(item)
}
# Sample data
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst <- list(a, b)
# Replacement function
replace_prot <- function(item) {
if (is.character(item) && length(item) == 1) {  # if it's a single string
return(sub("\\bProt\\b(?!\\.)", "Replacement", item))
} else if (is.vector(item)) {  # if it's a vector
return(sapply(item, function(x) sub("\\bProt\\b(?!\\.)", "Replacement", x)))
}
return(item)
}
# Apply the function to each item in the list
result_lst <- lapply(lst, replace_prot)
# Sample data
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst <- list(a, b)
# Replacement function
replace_prot <- function(item) {
if (is.character(item) && length(item) == 1) {  # if it's a single string
words <- unlist(strsplit(item, " "))
replaced <- sapply(words, function(x) sub("(^|\\s)Prot($|\\s)", "\\1Replacement\\2", x))
return(paste(replaced, collapse = " "))
} else if (is.vector(item)) {  # if it's a vector
return(sapply(item, function(x) sub("(^|\\s)Prot($|\\s)", "\\1Replacement\\2", x)))
}
return(item)
}
# Apply the function to each item in the list
result_lst <- lapply(lst, replace_prot)
print(result_lst)
View(lst)
View(result_lst)
# Sample data
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst <- list(a, b)
# Replacement function
replace_prot <- function(item, replacement) {
if (is.character(item) && length(item) == 1) {  # if it's a single string
words <- unlist(strsplit(item, " "))
replaced <- sapply(words, function(x) sub("(^|\\s)Prot($|\\s)", paste0("\\1", replacement, "\\2"), x))
return(paste(replaced, collapse = " "))
} else if (is.vector(item)) {  # if it's a vector
return(sapply(item, function(x) sub("(^|\\s)Prot($|\\s)", paste0("\\1", replacement, "\\2"), x)))
}
return(item)
}
# Apply the function to each item in the list with "Replacement" as the new value
result_lst <- lapply(lst, replace_prot, replacement = "new")
print(result_lst)
# Sample data
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst <- list(a, b)
# Replacement function
replace_prot <- function(item, replacement) {
if (is.character(item) && length(item) == 1) {  # if it's a single string
words <- unlist(strsplit(item, " "))
replaced <- sapply(words, function(x) sub("(^|\\s)Prot($|\\s)", paste0("\\1", replacement, "\\2"), x))
return(paste(replaced, collapse = " "))
} else if (is.vector(item)) {  # if it's a vector
replaced <- sapply(item, function(x) sub("(^|\\s)Prot($|\\s)", paste0("\\1", replacement, "\\2"), x))
return(unname(replaced))
}
return(item)
}
# Apply the function to each item in the list with "Replacement" as the new value
result_lst <- lapply(lst, replace_prot, replacement = "Replacement")
print(result_lst)
# Sample data
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst <- list(a, b)
# Replacement function
replace_word <- function(item, target, replacement) {
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
if (is.character(item) && length(item) == 1) {  # if it's a single string
words <- unlist(strsplit(item, " "))
replaced <- sapply(words, function(x) sub(target_pattern, replacement_pattern, x))
return(paste(replaced, collapse = " "))
} else if (is.vector(item)) {  # if it's a vector
replaced <- sapply(item, function(x) sub(target_pattern, replacement_pattern, x))
return(unname(replaced))
}
return(item)
}
# Apply the function to each item in the list, replacing "Prot" with "Replacement"
result_lst <- lapply(lst, replace_word, target = "Prot", replacement = "new")
print(result_lst)
# Sample data
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein", "Prot23")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst <- list(a, b)
# Replacement function
replace_word <- function(item, target, replacement) {
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
if (is.character(item) && length(item) == 1) {  # if it's a single string
words <- unlist(strsplit(item, " "))
replaced <- sapply(words, function(x) sub(target_pattern, replacement_pattern, x))
return(paste(replaced, collapse = " "))
} else if (is.vector(item)) {  # if it's a vector
replaced <- sapply(item, function(x) sub(target_pattern, replacement_pattern, x))
return(unname(replaced))
}
return(item)
}
# Apply the function to each item in the list, replacing "Prot" with "Replacement"
result_lst <- lapply(lst, replace_word, target = "Prot", replacement = "new")
print(result_lst)
replace_word_df <- function(df, target, replacement) {
# Constructing the regular expression patterns for the target and its replacement.
# The pattern ensures that the target word is isolated (i.e., not part of another word).
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
# Iterate over each column in the dataframe
df[] <- lapply(df, function(col) {
# Check if the column is of character type
if (is.character(col)) {
return(sapply(col, function(cell) sub(target_pattern, replacement_pattern, cell)))
}
return(col)  # Return original column if not of character type
})
return(df)
}
# Example usage:
df <- data.frame(
A = c("Prot is here", "I.Prot", "Nothing here"),
B = c("Prot", "I.Prot.Prot", "I_Prot"),
C = 1:3  # numeric column to demonstrate mixed types
)
print(df)  # before replacement
df <- replace_word_df(df, "Prot", "Replacement")
print(df)  # after replacement
replace_word_vector <- function(vec, target, replacement) {
# Constructing the regular expression patterns for the target and its replacement.
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
# Apply the replacement to each element of the vector
replaced_vec <- sapply(vec, function(item) sub(target_pattern, replacement_pattern, item))
# Remove any names and return the modified vector
return(unname(replaced_vec))
}
# Example usage:
vec <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein", "Prot is here")
print(vec)  # before replacement
vec <- replace_word_vector(vec, "Prot", "Replacement")
print(vec)  # after replacement
replace_word_recursive <- function(lst, target, replacement) {
# Constructing the regular expression patterns for the target and its replacement.
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
# Apply function to each item in the list
lapply(lst, function(item) {
# If item is a character vector
if (is.character(item)) {
return(sapply(item, function(x) sub(target_pattern, replacement_pattern, x)))
}
# If item is a dataframe
else if (is.data.frame(item)) {
return(replace_word_df(item, target, replacement))
}
# If item is a list
else if (is.list(item)) {
return(replace_word_recursive(item, target, replacement))
}
# If item is none of the above
else {
return(item)
}
})
}
# Test
lst <- list(
sub_list = list(
vec = c("Prot", "I.Prot", "Prot again"),
df = data.frame(A = c("Prot A", "I.Prot B", "Prot C"), B = c("No Prot", "I.Prot D", "E"))
),
df = data.frame(X = c("Prot X", "I.Prot Y"), Y = c("Prot Z", "I.Prot W")),
vec = c("Another Prot", "Last Prot", "I.Prot End")
)
print(lst)  # before replacement
lst <- replace_word_recursive(lst, "Prot", "Replacement")
print(lst)  # after replacement
replace_word_recursive <- function(lst, target, replacement) {
# Constructing the regular expression patterns for the target and its replacement.
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
# Apply function to each item in the list
lapply(lst, function(item) {
# If item is a character vector
if (is.character(item)) {
replaced_vec <- sapply(item, function(x) sub(target_pattern, replacement_pattern, x))
return(unname(replaced_vec))
}
# If item is a dataframe
else if (is.data.frame(item)) {
return(replace_word_df(item, target, replacement))
}
# If item is a list
else if (is.list(item)) {
return(replace_word_recursive(item, target, replacement))
}
# If item is none of the above
else {
return(item)
}
})
}
lst <- list(
sub_list = list(
vec = c("Prot", "I.Prot", "Prot again"),
df = data.frame(A = c("Prot A", "I.Prot B", "Prot C"), B = c("No Prot", "I.Prot D", "E"))
),
df = data.frame(X = c("Prot X", "I.Prot Y"), Y = c("Prot Z", "I.Prot W")),
vec = c("Another Prot", "Last Prot", "I.Prot End")
)
print(lst)  # before replacement
lst <- replace_word_recursive(lst, "Prot", "Replacement")
print(lst)  # after replacement
# Test code remains the same.
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein", "Prot23")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst2 <- list(a, b)
lst <- list(
test = lst2,
sub_list = list(
vec = c("Prot", "I.Prot", "Prot again"),
df = data.frame(A = c("Prot A", "I.Prot B", "Prot C"), B = c("No Prot", "I.Prot D", "E"))
),
df = data.frame(X = c("Prot X", "I.Prot Y"), Y = c("Prot Z", "I.Prot W")),
vec = c("Another Prot", "Last Prot", "I.Prot End")
)
print(lst)  # before replacement
lst <- replace_word_recursive(lst, "Prot", "Replacement")
print(lst)  # after replacement
replace_word_recursive <- function(lst, target, replacement) {
# Constructing the regular expression patterns for the target and its replacement.
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
# Apply function to each item in the list
lapply(lst, function(item) {
# If item is a character vector
if (is.character(item)) {
return(replace_word_vector(item, target, replacement))
}
# If item is a dataframe
else if (is.data.frame(item)) {
return(replace_word_df(item, target, replacement))
}
# If item is a list
else if (is.list(item)) {
return(replace_word_recursive(item, target, replacement))
}
# If item is none of the above
else {
return(item)
}
})
}
# Test code remains the same.
a <- c("Prot", "I.Prot", "I.Prot.Prot", "I_Prot", "Protein", "Prot23")
b <- "Prot I.Prot I.ProtProt I_Prot Protein"
lst2 <- list(a, b)
lst <- list(
test = lst2,
sub_list = list(
vec = c("Prot", "I.Prot", "Prot again"),
df = data.frame(A = c("Prot A", "I.Prot B", "Prot C"), B = c("No Prot", "I.Prot D", "E"))
),
df = data.frame(X = c("Prot X", "I.Prot Y"), Y = c("Prot Z", "I.Prot W")),
vec = c("Another Prot", "Last Prot", "I.Prot End")
)
print(lst)  # before replacement
lst <- replace_word_recursive(lst, "Prot", "Replacement")
print(lst)  # after replacement
replace_word_recursive <- function(lst, target, replacement) {
# Define the replace_word_vector function
replace_word_vector <- function(vec, target, replacement) {
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
replaced_vec <- sapply(vec, function(item) sub(target_pattern, replacement_pattern, item))
return(unname(replaced_vec))
}
# Define the replace_word_df function
replace_word_df <- function(df, target, replacement) {
target_pattern <- paste0("(^|\\s)", target, "($|\\s)")
replacement_pattern <- paste0("\\1", replacement, "\\2")
df[] <- lapply(df, function(col) {
if (is.character(col)) {
return(sapply(col, function(cell) sub(target_pattern, replacement_pattern, cell)))
}
return(col)
})
return(df)
}
# Now the actual logic of the replace_word_recursive function
lapply(lst, function(item) {
if (is.character(item)) {
return(replace_word_vector(item, target, replacement))
} else if (is.data.frame(item)) {
return(replace_word_df(item, target, replacement))
} else if (is.list(item)) {
return(replace_word_recursive(item, target, replacement))
} else {
return(item)
}
})
}
lst <- list(
sub_list = list(
vec = c("Prot", "I.Prot", "Prot again"),
df = data.frame(A = c("Prot A", "I.Prot B", "Prot C"), B = c("No Prot", "I.Prot D", "E"))
),
df = data.frame(X = c("Prot X", "I.Prot Y"), Y = c("Prot Z", "I.Prot W")),
vec = c("Another Prot", "Last Prot", "I.Prot End")
)
print(lst)  # before replacement
lst <- replace_word_recursive(lst, "Prot", "Replacement")
print(lst)  # after replacement
shiny::runApp()
runApp()
