df1 <- subset(df1, select = cols)
df2 <- subset(df2, select = cols)
# Find column names
col.names.df1 <- colnames(df1)
col.names.df2 <- colnames(df2)
# Create new column order
new_col_order <- c(rbind(col.names.df1, col.names.df2))
# Merge data frames with alternating columns
merged_df <- cbind(df1[, col.names.df1], df2[, col.names.df2])
merged_df <- merged_df[, new_col_order]
return(merged_df)
}
# Path to
d.folder <- "C:\\Users\\Justi\\Downloads"
f.path.spec   <- file.path(d.folder, "Species.csv")
f.path.spec2  <- file.path(d.folder, "Species(1).csv")
f.path.pars   <- file.path(d.folder, "Parameters.csv")
f.path.pars2  <- file.path(d.folder, "Parameters(1).csv")
f.path.reac   <- file.path(d.folder, "Reactions.csv")
f.path.reac2  <- file.path(d.folder, "Reactions(1).csv")
f.path.diff   <- file.path(d.folder, "DifferentialEquations.csv")
f.path.diff2  <- file.path(d.folder, "DifferentialEquations(1).csv")
f.path.sim_sbml <- file.path(d.folder, "sim_sbml.csv")
f.path.sim_repo <- file.path(d.folder, "sim_repo.csv")
df.sim_sbml <- read.csv(f.path.sim_sbml)
df.sim_repo <- read.csv(f.path.sim_repo)
# Compare data frames and get indices of non-matching rows
non_matching_rows <- anti_join(df.sim_sbml, df.sim_repo)
# Extract the indices
non_matching_indices <- rownames_to_column(non_matching_rows, var = "index")$index
# Display the result
print(non_matching_indices)
print(non_matching_rows)
df1 <- df.sim_sbml
df2 <- df.sim_repo
# Merge data frames with all = TRUE to identify non-matching rows
merged_df <- merge(df1, df2, by = "row.names", all = TRUE, suffixes = c("_df1", "_df2"))
# Find rows with differences
non_matching_indices <- which(apply(merged_df[, -1], 1, anyDuplicated) > 0)
# Display the result
print(non_matching_indices)
df1 == df2
identical(df1, df2)
df1 <- data.frame(ID = c(1, 2, 3),
Name = c("John", "Alice", "Bob"))
df2 <- data.frame(ID = c(1, 2, 3),
Name = c("John", "Alice", "Bob"))
df1 == df2
identical(df1, df2)
# Merge data frames with all = TRUE to identify non-matching rows
merged_df <- merge(df1, df2, by = "row.names", all = TRUE, suffixes = c("_df1", "_df2"))
# Find rows with differences
non_matching_indices <- which(apply(merged_df[, -1], 1, anyDuplicated) > 0)
# Display the result
print(non_matching_indices)
# Compare data frames and get indices of non-matching rows
non_matching_rows <- anti_join(df1, df2)
print(non_matching_rows)
# Extract the indices
non_matching_indices <- rownames_to_column(non_matching_rows, var = "index")$index
df1 <- data.frame(ID = c(1, 2, 3),
Name = c("John", "Alice", "Bob"))
df2 <- data.frame(ID = c(1, 2, 4),  # Note the change in the last row
Name = c("John", "Alice", "Charlie"))
# Compare data frames and get indices of non-matching rows
non_matching_rows <- anti_join(df1, df2)
print(non_matching_rows)
# Extract the indices
non_matching_indices <- rownames_to_column(non_matching_rows, var = "index")$index
# Display the result
print(non_matching_indices)
df1 == df2
identical(df1, df2)
# Merge data frames with all = TRUE to identify non-matching rows
merged_df <- merge(df1, df2, by = "row.names", all = TRUE, suffixes = c("_df1", "_df2"))
# Find rows with differences
non_matching_indices <- which(apply(merged_df[, -1], 1, anyDuplicated) > 0)
# Display the result
print(non_matching_indices)
runApp()
df.sim_sbml <- read.csv(f.path.sim_sbml)
df.sim_repo <- read.csv(f.path.sim_repo)
df1 <- df.sim_sbml
df2 <- df.sim_repo
df1 == df2
identical(df1, df2)
# Overall trest
df1 == df2
runApp()
sf
sf <- "MPF [APCCP.CDC20]-->(Km_42, k_d42) CDK1"
sf
extract_coefficients(sf)
sf <- "MPF [APCCP.CDC20]->(Km_42, k_d42) CDK1"
sf
extract_coefficients(sf)
#' Extract coefficients from a chemical equation.
#'
#' This function takes a chemical equation as input and extracts the stoichiometry coefficients.
#'
#' @param equation A character string representing the chemical equation.
#'
#' @return A list with two numeric vectors: reactants and products.
#'
#' @examples
#' equation <- "2*A  [kfg_67]<->(kf1) 4*C + 2*D"
#' result <- extract_coefficients(equation)
#' print(result$reactants)
#' print(result$products)
#'
#' @export
extract_coefficients <- function(equation) {
# Split the equation into reactants and products
parts <- strsplit(equation, "\\+|<->|->|-->")[[1]]
# Remove terms in brackets or parentheses
cleaned_parts <- str_replace_all(parts, "\\([^\\)]+\\)|\\[[^\\]]+\\]", "")
# Extract coefficients for each term
coefficients <- sapply(str_extract_all(cleaned_parts, "\\b\\d+\\b"), function(x) ifelse(length(x) > 0, as.numeric(x), 1))
# Flatten the result to a vector
coefficients <- unlist(coefficients)
# Calculate the number of reactants and products
eqn_split <- gsub("\\s", "", strsplit(equation, "\\<->|->|-->")[[1]])
search.parts <- gsub("\\s", "", cleaned_parts)
found.in.reactant <-
sapply(search.parts,
function(pattern) any(grepl(pattern, eqn_split[1], fixed = TRUE)))
found.in.product <-
sapply(search.parts,
function(pattern) any(grepl(pattern, eqn_split[2], fixed = TRUE)))
n.reactants <- length(which(found.in.reactant))
n.products <- length(which(found.in.product))
# Split coefficients into reactants and products
reactants <- head(coefficients, n.reactants)
products <- tail(coefficients, n.products)
return(list(reactants = reactants, products = products))
}
sf <- "MPF [APCCP.CDC20]->(Km_42, k_d42) CDK1"
sf
extract_coefficients(sf)
sf <- "MPF [APCCP.CDC20]-->(Km_42, k_d42) CDK1"
sf
extract_coefficients(sf)
runApp()
library(dplyr)
compare_dataframes <- function(df1, df2, cols) {
# Extract columns
df1_cols <- subset(df1, select = cols)
df2_cols <- subset(df2, select = cols)
# Compare data frames
differences <- anti_join(df1_cols, df2_cols)
return(differences)
}
compare_dataframes <- function(df1,
df2,
cols,
remove_whitespace = FALSE,
search_replace = NULL) {
# Function to remove whitespace from all terms in a data frame
remove_whitespace_from_df <- function(df) {
df[] <- lapply(df, function(x) gsub("\\s+", "", x))
return(df)
}
# Function to search and replace terms in a data frame
search_replace_in_df <- function(df, search_replace) {
if (!is.null(search_replace)) {
for (pair in search_replace) {
df[] <- lapply(df, function(x) gsub(pair[1], pair[2], x))
}
}
return(df)
}
# Extract columns
df1_cols <- subset(df1, select = cols)
df2_cols <- subset(df2, select = cols)
# Remove whitespace if specified
if (remove_whitespace) {
df1_cols <- remove_whitespace_from_df(df1_cols)
df2_cols <- remove_whitespace_from_df(df2_cols)
}
print(head(df1_cols))
print(head(df1_cols))
# Search and replace if specified
df1_cols <- search_replace_in_df(df1_cols, search_replace)
df2_cols <- search_replace_in_df(df2_cols, search_replace)
# Compare data frames
differences <- anti_join(df1_cols, df2_cols)
return(differences)
}
merge_alternate <- function(df1, df2, cols) {
if (length(cols) == 1) {return(cbind(df1[, cols], df2[, cols]))}
# Subset Data
df1 <- subset(df1, select = cols)
df2 <- subset(df2, select = cols)
# Find column names
col.names.df1 <- colnames(df1)
col.names.df2 <- colnames(df2)
# Create new column order
new_col_order <- c(rbind(col.names.df1, col.names.df2))
# Merge data frames with alternating columns
merged_df <- cbind(df1[, col.names.df1], df2[, col.names.df2])
merged_df <- merged_df[, new_col_order]
return(merged_df)
}
# Path to
d.folder <- "C:\\Users\\Justi\\Downloads"
f.spec.sbml <- file.path(d.folder, "sbml_species.csv")
f.pars.sbml <- file.path(d.folder, "sbml_params.csv")
f.reac.sbml <- file.path(d.folder, "sbml_reactions.csv")
f.diff.sbml <- file.path(d.folder, "sbml_de.csv")
f.sims.sbml <- file.path(d.folder, "sbml_sim.csv")
f.spec.repo <- file.path(d.folder, "repo_species.csv")
f.pars.repo <- file.path(d.folder, "repo_params.csv")
f.reac.repo <- file.path(d.folder, "repo_reactions.csv")
f.diff.repo <- file.path(d.folder, "repo_de.csv")
f.sims.repo  <- file.path(d.folder, "repo_sim.csv")
# Read CSV
df.spec.sbml  <- read.csv(f.spec.sbml)
df.pars.sbml  <- read.csv(f.pars.sbml)
df.reac.sbml  <- read.csv(f.reac.sbml)
df.diff.sbml  <- read.csv(f.diff.sbml)
df.sims.sbml  <- read.csv(f.sims.sbml)
df.spec.repo  <- read.csv(f.spec.repo)
df.pars.repo  <- read.csv(f.pars.repo)
df.reac.repo  <- read.csv(f.reac.repo)
df.diff.repo  <- read.csv(f.diff.repo)
df.sims.repo  <- read.csv(f.sims.repo)
# Choose columns to compare
col.spec <- c(1, 2)
col.par  <- c(1, 2)
col.reac <- 1
col.diff <- c(1, 2)
# Merge DFs with alternating columns
df.m.spec  <- merge_alternate(df.spec.sbml, df.spec.repo, col.spec)
df.m.pars  <- merge_alternate(df.pars.sbml, df.pars.repo, col.par)
df.m.reac  <- merge_alternate(df.reac.sbml, df.reac.repo, col.reac)
df.m.diff  <- merge_alternate(df.diff.sbml, df.diff.repo, col.diff)
# Example of the first few rows of the merged data frames
head(df.m.spec)
head(df.m.par)
library(dplyr)
compare_dataframes <- function(df1, df2, cols) {
# Extract columns
df1_cols <- subset(df1, select = cols)
df2_cols <- subset(df2, select = cols)
# Compare data frames
differences <- anti_join(df1_cols, df2_cols)
return(differences)
}
compare_dataframes <- function(df1,
df2,
cols,
remove_whitespace = FALSE,
search_replace = NULL) {
# Function to remove whitespace from all terms in a data frame
remove_whitespace_from_df <- function(df) {
df[] <- lapply(df, function(x) gsub("\\s+", "", x))
return(df)
}
# Function to search and replace terms in a data frame
search_replace_in_df <- function(df, search_replace) {
if (!is.null(search_replace)) {
for (pair in search_replace) {
df[] <- lapply(df, function(x) gsub(pair[1], pair[2], x))
}
}
return(df)
}
# Extract columns
df1_cols <- subset(df1, select = cols)
df2_cols <- subset(df2, select = cols)
# Remove whitespace if specified
if (remove_whitespace) {
df1_cols <- remove_whitespace_from_df(df1_cols)
df2_cols <- remove_whitespace_from_df(df2_cols)
}
print(head(df1_cols))
print(head(df1_cols))
# Search and replace if specified
df1_cols <- search_replace_in_df(df1_cols, search_replace)
df2_cols <- search_replace_in_df(df2_cols, search_replace)
# Compare data frames
differences <- anti_join(df1_cols, df2_cols)
return(differences)
}
merge_alternate <- function(df1, df2, cols) {
if (length(cols) == 1) {return(cbind(df1[, cols], df2[, cols]))}
# Subset Data
df1 <- subset(df1, select = cols)
df2 <- subset(df2, select = cols)
# Find column names
col.names.df1 <- colnames(df1)
col.names.df2 <- colnames(df2)
# Create new column order
new_col_order <- c(rbind(col.names.df1, col.names.df2))
# Merge data frames with alternating columns
merged_df <- cbind(df1[, col.names.df1], df2[, col.names.df2])
merged_df <- merged_df[, new_col_order]
return(merged_df)
}
# Path to
d.folder <- "C:\\Users\\Justi\\Downloads"
f.spec.sbml <- file.path(d.folder, "sbml_species.csv")
f.pars.sbml <- file.path(d.folder, "sbml_params.csv")
f.reac.sbml <- file.path(d.folder, "sbml_reactions.csv")
f.diff.sbml <- file.path(d.folder, "sbml_de.csv")
f.sims.sbml <- file.path(d.folder, "sbml_sim.csv")
f.spec.repo <- file.path(d.folder, "repo_species.csv")
f.pars.repo <- file.path(d.folder, "repo_params.csv")
f.reac.repo <- file.path(d.folder, "repo_reactions.csv")
f.diff.repo <- file.path(d.folder, "repo_de.csv")
f.sims.repo  <- file.path(d.folder, "repo_sim.csv")
# Read CSV
df.spec.sbml  <- read.csv(f.spec.sbml)
df.pars.sbml  <- read.csv(f.pars.sbml)
df.reac.sbml  <- read.csv(f.reac.sbml)
df.diff.sbml  <- read.csv(f.diff.sbml)
df.sims.sbml  <- read.csv(f.sims.sbml)
df.spec.repo  <- read.csv(f.spec.repo)
df.pars.repo  <- read.csv(f.pars.repo)
df.reac.repo  <- read.csv(f.reac.repo)
df.diff.repo  <- read.csv(f.diff.repo)
df.sims.repo  <- read.csv(f.sims.repo)
# Choose columns to compare
col.spec <- c(1, 2)
col.par  <- c(1, 2)
col.reac <- 1
col.diff <- c(1, 2)
# Merge DFs with alternating columns
df.m.spec  <- merge_alternate(df.spec.sbml, df.spec.repo, col.spec)
df.m.pars  <- merge_alternate(df.pars.sbml, df.pars.repo, col.par)
df.m.reac  <- merge_alternate(df.reac.sbml, df.reac.repo, col.reac)
df.m.diff  <- merge_alternate(df.diff.sbml, df.diff.repo, col.diff)
# Example of the first few rows of the merged data frames
head(df.m.spec)
head(df.m.pars)
head(df.m.reac)
head(df.m.diff)
# Find differences
spec.diff <- compare_dataframes(df.spec.sbml, df.spec.repo, col.spec)
pars.diff <- compare_dataframes(df.pars.sbml, df.pars.repo, col.par)
reac.diff <- compare_dataframes(df.reac.sbml, df.reac.repo, col.reac,
remove_whitespace = TRUE)
diff.diff <- compare_dataframes(df.diff.sbml, df.diff.repo, col.diff)
print(spec.diff)
print(pars.diff)
print(reac.diff)
print(diff.diff)
# Determine if Simulation results are different and where ----------------------
df1 <- df.sims.sbml
df2 <- df.sims.repo
# Overall trest
df1 == df2
identical(df1, df2)
# df1 <- data.frame(ID = c(1, 2, 3),
#                   Name = c("John", "Alice", "Bob"))
# df2 <- data.frame(ID = c(1, 2, 3),
#                   Name = c("John", "Alice", "Bob"))
# df1 <- data.frame(ID = c(1, 2, 3),
#                   Name = c("John", "Alice", "Bob"))
# df2 <- data.frame(ID = c(1, 2, 4),  # Note the change in the last row
#                   Name = c("John", "Alice", "Charlie"))
# Compare data frames and get indices of non-matching rows
non_matching_rows <- anti_join(df1, df2)
print(non_matching_rows)
# Extract the indices
non_matching_indices <- rownames_to_column(non_matching_rows, var = "index")$index
# Display the result
print(non_matching_indices)
# Merge data frames with all = TRUE to identify non-matching rows
merged_df <- merge(df1, df2, by = "row.names", all = TRUE, suffixes = c("_df1", "_df2"))
# Find rows with differences
non_matching_indices <- which(apply(merged_df[, -1], 1, anyDuplicated) > 0)
# Display the result
print(non_matching_indices)
sf <- "MPF [APCCP.CDC20]-->(Km_42, k_d42) CDK1"
sf
extract_coefficients(sf)
parts <- str
# Example of the first few rows of the merged data frames
head(df.m.spec)
head(df.m.pars)
head(df.m.reac)
head(df.m.diff)
print(spec.diff)
print(pars.diff)
print(reac.diff)
head(df.m.diff)
head(df.m.reac)
View(df.m.reac)
runApp()
a <- df.m.diff[1,]
a# Find differences
a <- df.m.diff[2,]
a
a <- df.m.diff[3,]
a
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
print(IORV[[1]])
IORV[[i]]$Type
runApp()
law
runApp()
law.vars
par.names
parameters
runApp()
rct.in.law
prd.in.law
par.in.law
par.in.law
parameters
law.var
law.vars[1]
reactants
products
runApp()
runApp()
entry
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
entry
all.var
runApp()
runApp()
r.reactants
r.products
stoic.reactant
stoice.products
stoic.products
stoic.products
stoic.products
entry$reactants
# Example list with "NA" values
example_list <- list("A", "B", "NA", "C", "NA", "D")
# Convert "NA" to NA in the list
cleaned_list <- lapply(example_list, function(x) ifelse(x == "NA", NA, x))
# Print the cleaned list
print(cleaned_list)
runApp()
r.reactants
r.products
stoic.reactant
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
reaction.list
current.reaction
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
reaction.tags
current.reaction
current.reaction
reaction.list
reactionEntry
node.products
node.par
out.list
reaction.list
reaction.list
reaction.list[[1]]$Parameter.Values
reaction.parameters.df
runApp()
entry
out
entry
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
par.name
species.names
rams.names
params.names
compart.names
runApp()
